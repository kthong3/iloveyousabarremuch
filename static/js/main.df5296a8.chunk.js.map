{"version":3,"sources":["assets/landing.jpg","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useWindowWidth","_useState","useState","window","innerWidth","_useState2","Object","slicedToArray","windowWidth","setWindowWidth","handleWindowResize","useEffect","addEventListener","removeEventListener","Home","imageUrl","Landing","backgroundStyle","backgroundImage","concat","opacity","react_default","a","createElement","className","style","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleScroll","bind","assertThisInitialized","setState","scroll","scrollY","eventListener","document","querySelector","top","offsetTop","height","offsetHeight","body","paddingTop","navStyle","color","react_router_dom","basename","to","react_router","exact","path","component","OurStory","WeddingParty","Sponsors","Gallery","Event","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df5296a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/landing.af8a55b9.jpg\";","import React, { useState, useEffect }from 'react';\nimport Landing from '../assets/landing.jpg'\n\nconst Home = () => {\n  const imageUrl = useWindowWidth() >= 650 ? Landing : Landing;\n  const backgroundStyle = {\n    backgroundImage: `url(${imageUrl})`,\n    opacity: 0.5\n  }\n\n  return (\n    <div className='App' style={backgroundStyle}>\n      <div className='App-content'>\n        <h2>Home</h2>\n      </div>\n    </div>\n  )\n};\n\nconst useWindowWidth = () => {\n  const [windowWidth, setWindowWidth ] = useState(window.innerWidth);\n\n  const handleWindowResize = () => {\n      setWindowWidth(window.innerWidth);\n  };\n\n  useEffect(() => {\n      window.addEventListener('resize', handleWindowResize);\n      return () => window.removeEventListener('resize', handleWindowResize);\n  },[]);\n\n  return windowWidth;\n};\n\nexport default Home;","import React, { Component } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\"\nimport './App.css'\nimport Home from './components/Home.js'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {};\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n\n  handleScroll() {\n    this.setState({scroll: window.scrollY});\n  }\n\n  componentDidMount(){\n    const eventListener = document.querySelector('nav');\n    this.setState({\n      top: eventListener.offsetTop,\n      height: eventListener.offsetHeight\n    });\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentDidUpdate() {\n    this.state.scroll > this.state.top ? document.body.style.paddingTop = `${this.state.height}px` : document.body.style.paddingTop = 0;\n  }\n\n  render() {\n    const navStyle = {\n      color: 'white'\n    }\n    return (\n     <HashRouter basename='/'>\n      <div>\n        <nav className={this.state.scroll > this.state.top ? \"fixed-nav\" : \"\"}>\n          <ul className=\"nav-links\">\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link style={navStyle} to=\"/our_story\">Our Story</Link></li>\n            <li><Link style={navStyle} to=\"/wedding_party\">Wedding Party</Link></li>\n            <li><Link style={navStyle} to=\"/sponsors\">Sponsors</Link></li>\n            <li><Link style={navStyle} to=\"/gallery\">Gallery</Link></li>\n            <li><Link style={navStyle} to=\"/event\">Event Information</Link></li>\n          </ul>\n        </nav>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/our_story\" component={OurStory} />\n        <Route path=\"/wedding_party\" component={WeddingParty} />\n        <Route path=\"/sponsors\" component={Sponsors} />\n        <Route path=\"/gallery\" component={Gallery} />\n        <Route path=\"/event\" component={Event} />\n      </div>\n     </HashRouter>\n    );\n  }\n}\n\nconst OurStory = () => <div><h2>Our Story</h2></div>\nconst WeddingParty = () => <div><h2>Wedding Party</h2></div>\nconst Sponsors = () => <div><h2>Sponsors</h2></div>\nconst Gallery= () => <div><h2>Gallery</h2></div>\nconst Event = () => <div><h2>Event Information</h2></div>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}